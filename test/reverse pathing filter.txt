######反向路由######

反向路由是指，在存在多个网卡的环境下，由一个网卡接收的数据包，查询路由表后从相同的网卡返回时，Linux操作系统会进行反向路由检查。

在Openeuler21.03操作系统下配置反向路由

（1）构造路由环境
	首先我们需要三台主机，分别作为发送端、接收端和路由器，这里我们使用虚拟化来完成。在虚拟化的情况下，需要将3台主机全部接入 相同的虚拟网卡。其中，发送端和接收端至少需要配置一个网卡，而路由器至少需要配置两个网卡，分别对应发送端和接收端。
	VMware下新建3个主机，安装好Openeuler21.03后，分别命名为R（接收端）、S（发送端）和R（路由器）。其中，主机R需要手动添加网络适配器；添加完毕后，主机R、主机S和路由器R共有4个网络适配器，将这4个网络适配器接入同一个虚拟网卡，如vmnet0；
（2）配置IP地址
	主机R的IP地址设置为192.168.101.43/24，网关为192.168.101.41；
	主机S的IP地址设置为192.168.100.43/24，网关为192.168.100.41；
	路由器的一个网卡（如ens33）的IP地址设为192.168.100.41，另一个网卡（如ens35）的IP地址设为192.168.101.41；
	以上的IP地址可以自行修改，只要保证主机R和主机S的IP地址不在同一网段内，并且它们的网关分别是路由器两个网卡对应的IP地址；
（3）配置反向路由条件
	在构造完路由环境后，需要配置好操作系统环境，来激活Linux的反向路由检查。这里主要是开启路由器的路由功能、防火墙放行流量和路由器开启严格反向路由检查。
	在三台主机上执行”systemctl stop firewalld“关闭防火墙（openeuler21.03默认开启防火墙，并会阻断UDP流量）；
	在路由器R上，执行”echo 1 > /proc/sys/net/ipv4/ip_forward“开启路由功能（操作系统重启后需要再次执行该命令）；
	在路由器R上，执行”echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter“开启严格的反向路由检查；
	
（4）IP地址Spoof
	为了触发路由器的反向路由检测，需要在在发送端伪造IP地址，在Openeuler操作系统下直接使用Iptables将本机的发送流量的源地址全部伪装成与接收端同一网段的地址。
	在主机S上执行”iptables -t nat -A POSTROUTING -j SNAT --to-source 192.168.101.60“

（5）监视反向路由造成的丢包
	由反向路由造成的丢包在netstat和ifconfig工具中是不显示的，所以要确认成功构造了反向路由丢包场景，需要使用其他方法来确认。这里在路由器上使用tcpdump，指定抓包网卡为接收端接入的网卡，这时候可以通过tcpdump的输出信息来检查是否成功构造了反向路由场景。
	在路由器R上执行命令”tcpdump -i ens33 -p icmp“；
	在主机S上执行命令"ping 192.168.101.43"；
	在路由器R上可以看到tcpdump的输出结果，并且在主机R上没有接收到主机S发送的包。
